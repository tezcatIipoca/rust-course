use inline_c::predicates::predicate::le;
use common::{inner_print, outer_print};

/// # 所有权
/// 所有的程序都必须和计算机内存打交道，如何从内存中申请空间来存放程序的运行内容，如何在不需要的时候释放这些空间，成了重中之重，也是所有编程语言设计的难点之一。在计算机语言不断演变过程中，出现了三种流派：
///
/// 垃圾回收机制(GC)，在程序运行时不断寻找不再使用的内存，典型代表：Java、Go
/// - 手动管理内存的分配和释放, 在程序中，通过函数调用的方式来申请和释放内存，典型代表：C++
/// - 通过所有权来管理内存，编译器在编译时会根据一系列规则进行检查
/// - 其中 Rust 选择了第三种，最妙的是，这种检查只发生在编译期，因此对于程序运行期，不会有任何性能上的损失。
///



/// # 所有权规则
/// 理解了堆栈，接下来看一下关于所有权的规则，首先请谨记以下规则：
///
/// 1. Rust 中每一个值都被一个变量所拥有，该变量被称为值的所有者
/// 2. 一个值同时只能被一个变量所拥有，或者说一个值只能拥有一个所有者
/// 3. 当所有者(变量)离开作用域范围时，这个值将被丢弃(drop)
///
#[outer_print("所有权规则")]
pub fn ownership_rule() {
    inner_print!("变量作用域");
    // 作用域是一个变量在程序中有效的范围, 假如有这样一个变量：
    let s = "hello";
    // 变量 s 绑定到了一个字符串字面值，该字符串字面值是硬编码到程序代码中的。s 变量从声明的点开始直到当前作用域的结束都是有效的：
    {
        // s在这里无效，它尚未声明
        let s = "hello";  // 从此处起，s 是有效的
        // 使用 s
    }                           // 此作用域已结束，s不再有效

    // 简而言之，s 从创建开始就有效，然后有效期持续到它离开作用域为止，可以看出，就作用域来说，Rust 语言跟其他编程语言没有区别。

    inner_print!("简单的介绍String类型");
    // 我们已经见过字符串字面值 let s ="hello"，s 是被硬编码进程序里的字符串值（类型为 &str ）。

    /// 字符串字面值是很方便的，但是它并不适用于所有场景。
    /// - 字符串字面值是不可变的，因为被硬编码到程序代码中
    /// - 并非所有字符串的值都能在编写代码时得知
    // 例如，字符串是需要程序运行时，通过用户动态输入然后存储在内存中的，这种情况，字符串字面值就完全无用武之地。
    // 为此，Rust 为我们提供动态字符串类型: String, 该类型被分配到堆上，因此可以动态伸缩，也就能存储在编译时大小未知的文本。

    // 可以使用下面的方法基于字符串字面量来创建 String 类型：
    let s = String::from("hello");
    /// :: 是一种调用操作符，这里表示调用 String 中的 from 方法，因为 String 存储在堆上是动态的，你可以这样修改它：
    let mut s=String::from("hello");
    s.push_str(",world");  // push_str() 在字符串后追加字面值
    println!("{}",s);  // 打印
}

#[outer_print("变量绑定背后的数据交互")]
pub fn variable_bind() {
    inner_print!("转移所有权");
    let x = 5;
    let y = x;
    // 代码背后的逻辑很简单, 将 5 绑定到变量 x；接着拷贝 x 的值赋给 y，最终 x 和 y 都等于 5，
    // 因为整数是 Rust 基本数据类型，是固定大小的简单值，因此这两个值都是通过自动拷贝的方式来赋值的，都被存在栈中，完全无需在堆上分配内存。
    println!("x:{} y:{}",x,y);
    // 可能有同学会有疑问：这种拷贝不消耗性能吗？
    // 实际上，这种栈上的数据足够简单，而且拷贝非常非常快，只需要复制一个整数大小（i32，4 个字节）的内存即可，
    // 因此在这种情况下，拷贝的速度远比在堆上创建内存来得快的多。
    // 实际上，上一章我们讲到的 Rust 基本类型都是通过自动拷贝的方式来赋值的，就像上面代码一样。
    let s1 = String::from("hello");
    let s2 = s1;
    println!("{}",s2);
    // 把 s1 的内容拷贝一份赋值给 s2，实际上，并不是这样。之前也提到了，对于基本类型（存储在栈上），Rust 会自动拷贝，
    // 但是 String 不是基本类型，而且是存储在堆上的，因此不能自动拷贝。
    /// 实际上， String 类型是一个复杂类型，由存储在栈中的堆指针、字符串长度、字符串容量共同组成，其中堆指针是最重要的，它指向了真实存储字符串内容的堆内存，
    /// 至于长度和容量，如果你有 Go 语言的经验，这里就很好理解：容量是堆内存分配空间的大小，长度是目前已经使用的大小。
    ///
    /// 总之 String 类型指向了一个堆上的空间，这里存储着它的真实数据，下面对上面代码中的 let s2 = s1 分成两种情况讨论：
    /// 1. 拷贝 String 和存储在堆上的字节数组 如果该语句是拷贝所有数据(深拷贝)，那么无论是 String 本身还是底层的堆上数据，都会被全部拷贝，这对于性能而言会造成非常大的影响
    /// 2. 只拷贝 String 本身 这样的拷贝非常快，因为在 64 位机器上就拷贝了 8字节的指针、8字节的长度、8字节的容量，总计 24 字节，但是带来了新的问题，还记得我们之前提到的所有权规则吧？其中有一条就是：一个值只允许有一个所有者，而现在这个值（堆上的真实字符串数据）有了两个所有者：s1 和 s2。

    // 好吧，就假定一个值可以拥有两个所有者，会发生什么呢？
    /// 当变量离开作用域后，Rust 会自动调用 drop 函数并清理变量的堆内存。
    /// 不过由于两个 String 变量指向了同一位置。这就有了一个问题：当 s1 和 s2 离开作用域，它们都会尝试释放相同的内存。
    /// 这是一个叫做 二次释放（double free） 的错误，也是之前提到过的内存安全性 BUG 之一。
    /// 两次释放（相同）内存会导致内存污染，它可能会导致潜在的安全漏洞。
    // 因此，Rust 这样解决问题：当 s1 赋予 s2 后，Rust 认为 s1 不再有效，
    // 因此也无需在 s1 离开作用域后 drop 任何东西，这就是把所有权从 s1 转移给了 s2，s1 在被赋予 s2 后就马上失效了。
    // 再来看看，在所有权转移后再来使用旧的所有者，会发生什么：
    /**
    let s1 = String::from("hello");
    let s2 = s1;
    println!("{}, world!", s1);
    //由于 Rust 禁止你使用无效的引用，你会看到以下的错误：
    `error[E0382]: borrow of moved value: `s1` `
    */

    /// 如果你在其他语言中听说过术语 浅拷贝(shallow copy) 和 深拷贝(deep copy)，
    /// 那么拷贝指针、长度和容量而不拷贝数据听起来就像浅拷贝，
    /// 但是又因为 Rust 同时使第一个变量 s1 无效了，因此这个操作被称为 移动(move)，而不是浅拷贝。
    /// 上面的例子可以解读为 s1 被移动到了 s2 中。那么具体发生了什么，用一张图简单说明：
    /// 图片见 https://course.rs/basic/ownership/ownership.html#%E8%BD%AC%E7%A7%BB%E6%89%80%E6%9C%89%E6%9D%83
    ///
    /// 这样就解决了我们之前的问题，s1 不再指向任何数据，只有 s2 是有效的，当 s2 离开作用域，它就会释放内存。
    /// 相信此刻，你应该明白了，为什么 Rust 称呼 let a = b 为变量绑定了吧？
    let x: &str = "hello, world";
    let y = x;
    println!("{},{}",x,y);
    // 这段代码和之前的 String 有一个本质上的区别：在 String 的例子中 s1 持有了通过String::from("hello") 创建的值的所有权，
    // 而这个例子中，x 只是引用了存储在二进制中的字符串 "hello, world"，并没有持有所有权。
    // 因此 let y = x 中，仅仅是对该引用进行了拷贝，此时 y 和 x 都引用了同一个字符串

    inner_print!("克隆(浅拷贝)");
    /// 首先，Rust 永远也不会自动创建数据的 “深拷贝”。因此，任何自动的复制都不是深拷贝，可以被认为对运行时性能影响较小。
    ///  如果我们确实需要深度复制 String 中堆上的数据，而不仅仅是栈上的数据，可以使用一个叫做 clone 的方法。
    let s1= String::from("hello");
    let s2=s1.clone();
    println!("s1 = {}, s2 = {}", s1, s2);
    // 这段代码能够正常运行，因此说明 s2 确实完整的复制了 s1 的数据。
    // 如果代码性能无关紧要，例如初始化程序时，或者在某段时间只会执行一次时，你可以使用 clone 来简化编程。但是对于执行较为频繁的代码(热点路径)，使用 clone 会极大的降低程序性能，需要小心使用！

    inner_print!("克隆(深拷贝)");
    /// 浅拷贝只发生在栈上，因此性能很高，在日常编程中，浅拷贝无处不在。
    let x = 5;
    let y = x;
    println!("x = {}, y = {}", x, y);

    // 原因是像整型这样的基本类型在编译时是已知大小的，会被存储在栈上，所以拷贝其实际的值是快速的。
    // 这意味着没有理由在创建变量 y 后使 x 无效（x、y 都仍然有效）。
    // 换句话说，这里没有深浅拷贝的区别，因此这里调用 clone 并不会与通常的浅拷贝有什么不同，我们可以不用管它（可以理解成在栈上做了深拷贝）。

    /// Rust 有一个叫做 Copy 的特征，可以用在类似整型这样在栈中存储的类型。如果一个类型拥有 Copy 特征，一个旧的变量在被赋值给其他变量后仍然可用。
    /// 那么什么类型是可 Copy 的呢？可以查看给定类型的文档来确认，不过作为一个通用的规则： 任何基本类型的组合可以 Copy ，不需要分配内存或某种形式资源的类型是可以 Copy 的。
    /// - 所有整数类型，比如 u32
    /// - 布尔类型，bool，它的值是 true 和 false
    /// - 所有浮点数类型，比如 f64
    /// - 字符类型，char
    /// - 元组，当且仅当其包含的类型也都是 Copy 的时候。比如，(i32, i32) 是 Copy 的，但 (i32, String) 就不是
    /// - 不可变引用 &T ，例如转移所有权中的最后一个例子，但是注意: 可变引用 &mut T 是不可以 Copy的
    /// - 函数传值与返回;
    let temp=0;
}

#[outer_print("函数传值与返回")]
pub fn function_args_return() {
    /// 将值传递给函数，一样会发生 移动 或者 复制，就跟 let 语句一样，下面的代码展示了所有权、作用域的规则：
    ///
    /**
    ```rust
    fn main() {
    let s1 = gives_ownership();         // gives_ownership 将返回值
                                        // 移给 s1

    let s2 = String::from("hello");     // s2 进入作用域

    let s3 = takes_and_gives_back(s2);  // s2 被移动到
                                        // takes_and_gives_back 中,
                                        // 它也将返回值移给 s3
    } // 这里, s3 移出作用域并被丢弃。s2 也移出作用域，但已被移走，
      // 所以什么也不会发生。s1 移出作用域并被丢弃

    fn gives_ownership() -> String {             // gives_ownership 将返回值移动给
                                                 // 调用它的函数

        let some_string = String::from("hello"); // some_string 进入作用域.

        some_string                              // 返回 some_string 并移出给调用的函数
    }

    // takes_and_gives_back 将传入字符串并返回该值
    fn takes_and_gives_back(a_string: String) -> String { // a_string 进入作用域

        a_string  // 返回 a_string 并移出给调用的函数
    }
    ```
     */

    {
        let s1 = gives_ownership();         // gives_ownership 将返回值
        // 移给 s1

        let s2 = String::from("hello");     // s2 进入作用域

        let s3 = takes_and_gives_back(s2);  // s2 被移动到
        // takes_and_gives_back 中,
        // 它也将返回值移给 s3
    } // 这里, s3 移出作用域并被丢弃。s2 也移出作用域，但已被移走，
    // 所以什么也不会发生。s1 移出作用域并被丢弃

    fn gives_ownership() -> String {             // gives_ownership 将返回值移动给
        // 调用它的函数

        let some_string = String::from("hello"); // some_string 进入作用域.

        some_string                              // 返回 some_string 并移出给调用的函数
    }

    // takes_and_gives_back 将传入字符串并返回该值
    fn takes_and_gives_back(a_string: String) -> String { // a_string 进入作用域

        a_string  // 返回 a_string 并移出给调用的函数
    }
}